module Unit.TestExpectations (module Unit.TestExpectations) where

import Common.AST
import Lexer.Lexer (AlexPosn(..))

helloWorldAST :: AST AlexPosn
helloWorldAST =
  [Left $ Let [FunDef "main" []
    (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Hello world!\\n") (AlexPn 24 1 25)]) (AlexPn 11 1 12)) (AlexPn 4 1 5)] (AlexPn 0 1 1)
  ]

hanoiAST :: AST AlexPosn
hanoiAST =
    [Left (Let [FunDef "main" [] (LetIn (Let [FunDef "move" [Param "source" (AlexPn 22 2 12),Param "target" (AlexPn 29 2 19)] (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Moving from: ") (AlexPn 55 3 18)]) (AlexPn 42 3 5)) (Expr (FunAppExpr "print_string" [Expr (ConstExpr "source") (AlexPn 89 4 18)]) (AlexPn 76 4 5))) (AlexPn 42 3 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr " to ") (AlexPn 114 5 18)]) (AlexPn 101 5 5))) (AlexPn 42 3 5)) (Expr (FunAppExpr "print_string" [Expr (ConstExpr "target") (AlexPn 139 6 18)]) (AlexPn 126 6 5))) (AlexPn 42 3 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n") (AlexPn 164 7 18)]) (AlexPn 151 7 5))) (AlexPn 42 3 5)) (AlexPn 17 2 7)] (AlexPn 13 2 3)) (LetIn (LetRec [FunDef "hanoi" [Param "rings" (AlexPn 188 8 17),Param "source" (AlexPn 194 8 23),Param "target" (AlexPn 201 8 30),Param "auxil" (AlexPn 208 8 37)] (Expr (IfThenExpr (Expr (BinOpExpr GTOp (Expr (ConstExpr "rings") (AlexPn 223 9 8)) (Expr (IntCExpr 0) (AlexPn 231 9 16))) (AlexPn 223 9 8)) (Expr (BeginExpr (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "hanoi" [Expr (BinOpExpr MinusOp (Expr (ConstExpr "rings") (AlexPn 261 11 14)) (Expr (IntCExpr 1) (AlexPn 267 11 20))) (AlexPn 261 11 14),Expr (ConstExpr "source") (AlexPn 270 11 23),Expr (ConstExpr "auxil") (AlexPn 277 11 30),Expr (ConstExpr "target") (AlexPn 283 11 36)]) (AlexPn 254 11 7)) (Expr (FunAppExpr "move" [Expr (ConstExpr "source") (AlexPn 302 12 12),Expr (ConstExpr "target") (AlexPn 309 12 19)]) (AlexPn 297 12 7))) (AlexPn 254 11 7)) (Expr (FunAppExpr "hanoi" [Expr (BinOpExpr MinusOp (Expr (ConstExpr "rings") (AlexPn 330 13 14)) (Expr (IntCExpr 1) (AlexPn 336 13 20))) (AlexPn 330 13 14),Expr (ConstExpr "auxil") (AlexPn 339 13 23),Expr (ConstExpr "target") (AlexPn 345 13 29),Expr (ConstExpr "source") (AlexPn 352 13 36)]) (AlexPn 323 13 7))) (AlexPn 254 11 7))) (AlexPn 242 10 5))) (AlexPn 220 9 5)) (AlexPn 182 8 11)] (AlexPn 174 8 3)) (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Please, give the number of rings: ") (AlexPn 385 15 16)]) (AlexPn 372 15 3)) (LetIn (Let [FunDef "n" [] (Expr (FunAppExpr "read_int" [Expr UnitCExpr (AlexPn 442 16 20)]) (AlexPn 433 16 11)) (AlexPn 429 16 7)] (AlexPn 425 16 3)) (Expr (FunAppExpr "hanoi" [Expr (ConstExpr "n") (AlexPn 456 17 9),Expr (StringCExpr "left") (AlexPn 458 17 11),Expr (StringCExpr "right") (AlexPn 465 17 18),Expr (StringCExpr "middle") (AlexPn 473 17 26)]) (AlexPn 450 17 3)) (AlexPn 425 16 3))) (AlexPn 372 15 3)) (AlexPn 174 8 3)) (AlexPn 13 2 3)) (AlexPn 4 1 5)] (AlexPn 0 1 1))]

hanoiTypeAST :: AST AlexPosn
hanoiTypeAST =
    [Right (TypeDef [TDef "pile" [Constr "Left" [] (AlexPn 12 1 13),Constr "Middle" [] (AlexPn 19 1 20),Constr "Right" [] (AlexPn 28 1 29)] (AlexPn 5 1 6)] (AlexPn 0 1 1)),Left (Let [FunDef "print_pile" [Param "pile" (AlexPn 50 3 16)] (MatchExpr (Expr (ConstExpr "pile") (AlexPn 65 4 9)) [Match (Pattern (ConstrPattern "Left" []) (AlexPn 79 5 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "left") (AlexPn 102 5 28)]) (AlexPn 89 5 15)) (AlexPn 79 5 5),Match (Pattern (ConstrPattern "Middle" []) (AlexPn 113 6 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "middle") (AlexPn 136 6 28)]) (AlexPn 123 6 15)) (AlexPn 113 6 5),Match (Pattern (ConstrPattern "Right" []) (AlexPn 149 7 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "right") (AlexPn 172 7 28)]) (AlexPn 159 7 15)) (AlexPn 149 7 5)] (AlexPn 59 4 3)) (AlexPn 39 3 5)] (AlexPn 35 3 1)),Left (Let [FunDef "main" [] (LetIn (Let [FunDef "move" [Param "source" (AlexPn 209 11 12),Param "target" (AlexPn 216 11 19)] (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Moving from: ") (AlexPn 242 12 18)]) (AlexPn 229 12 5)) (Expr (FunAppExpr "print_pile" [Expr (ConstExpr "source") (AlexPn 274 13 16)]) (AlexPn 263 13 5))) (AlexPn 229 12 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr " to ") (AlexPn 299 14 18)]) (AlexPn 286 14 5))) (AlexPn 229 12 5)) (Expr (FunAppExpr "print_pile" [Expr (ConstExpr "target") (AlexPn 322 15 16)]) (AlexPn 311 15 5))) (AlexPn 229 12 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n") (AlexPn 347 16 18)]) (AlexPn 334 16 5))) (AlexPn 229 12 5)) (AlexPn 204 11 7)] (AlexPn 200 11 3)) (LetIn (LetRec [FunDef "hanoi" [Param "rings" (AlexPn 371 17 17),Param "source" (AlexPn 377 17 23),Param "target" (AlexPn 384 17 30),Param "auxil" (AlexPn 391 17 37)] (Expr (IfThenExpr (Expr (BinOpExpr GTOp (Expr (ConstExpr "rings") (AlexPn 406 18 8)) (Expr (IntCExpr 0) (AlexPn 414 18 16))) (AlexPn 406 18 8)) (Expr (BeginExpr (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "hanoi" [Expr (BinOpExpr MinusOp (Expr (ConstExpr "rings") (AlexPn 444 20 14)) (Expr (IntCExpr 1) (AlexPn 450 20 20))) (AlexPn 444 20 14),Expr (ConstExpr "source") (AlexPn 453 20 23),Expr (ConstExpr "auxil") (AlexPn 460 20 30),Expr (ConstExpr "target") (AlexPn 466 20 36)]) (AlexPn 437 20 7)) (Expr (FunAppExpr "move" [Expr (ConstExpr "source") (AlexPn 485 21 12),Expr (ConstExpr "target") (AlexPn 492 21 19)]) (AlexPn 480 21 7))) (AlexPn 437 20 7)) (Expr (FunAppExpr "hanoi" [Expr (BinOpExpr MinusOp (Expr (ConstExpr "rings") (AlexPn 513 22 14)) (Expr (IntCExpr 1) (AlexPn 519 22 20))) (AlexPn 513 22 14),Expr (ConstExpr "auxil") (AlexPn 522 22 23),Expr (ConstExpr "target") (AlexPn 528 22 29),Expr (ConstExpr "source") (AlexPn 535 22 36)]) (AlexPn 506 22 7))) (AlexPn 437 20 7))) (AlexPn 425 19 5))) (AlexPn 403 18 5)) (AlexPn 365 17 11)] (AlexPn 357 17 3)) (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Please, give the number of rings: ") (AlexPn 568 24 16)]) (AlexPn 555 24 3)) (LetIn (Let [FunDef "n" [] (Expr (FunAppExpr "read_int" [Expr UnitCExpr (AlexPn 625 25 20)]) (AlexPn 616 25 11)) (AlexPn 612 25 7)] (AlexPn 608 25 3)) (Expr (FunAppExpr "hanoi" [Expr (ConstExpr "n") (AlexPn 639 26 9),Expr (ConstConstrExpr "Left") (AlexPn 641 26 11),Expr (ConstConstrExpr "Right") (AlexPn 646 26 16),Expr (ConstConstrExpr "Middle") (AlexPn 652 26 22)]) (AlexPn 633 26 3)) (AlexPn 608 25 3))) (AlexPn 555 24 3)) (AlexPn 357 17 3)) (AlexPn 200 11 3)) (AlexPn 191 10 5)] (AlexPn 187 10 1))]

primesAST :: AST AlexPosn
primesAST =
    [Left (LetRec [FunDef "prime" [Param "n" (AlexPn 14 1 15)] (Expr (IfThenElseExpr (Expr (BinOpExpr LTOp (Expr (ConstExpr "n") (AlexPn 28 2 11)) (Expr (IntCExpr 0) (AlexPn 32 2 15))) (AlexPn 28 2 11)) (Expr (FunAppExpr "prime" [Expr (UnOpExpr MinusUnOp (Expr (ConstExpr "n") (AlexPn 53 2 36))) (AlexPn 52 2 35)]) (AlexPn 45 2 28)) (Expr (IfThenElseExpr (Expr (BinOpExpr LTOp (Expr (ConstExpr "n") (AlexPn 66 3 11)) (Expr (IntCExpr 2) (AlexPn 70 3 15))) (AlexPn 66 3 11)) (Expr FalseCExpr (AlexPn 83 3 28)) (Expr (IfThenElseExpr (Expr (BinOpExpr EqOp (Expr (ConstExpr "n") (AlexPn 99 4 11)) (Expr (IntCExpr 2) (AlexPn 103 4 15))) (AlexPn 99 4 11)) (Expr TrueCExpr (AlexPn 116 4 28)) (Expr (IfThenElseExpr (Expr (BinOpExpr EqOp (Expr (BinOpExpr ModOp (Expr (ConstExpr "n") (AlexPn 131 5 11)) (Expr (IntCExpr 2) (AlexPn 137 5 17))) (AlexPn 131 5 11)) (Expr (IntCExpr 0) (AlexPn 141 5 21))) (AlexPn 131 5 11)) (Expr FalseCExpr (AlexPn 148 5 28)) (LetIn (LetRec [FunDef "loop" [Param "i" (AlexPn 174 6 21)] (Expr (IfThenElseExpr (Expr (BinOpExpr LEqOp (Expr (ConstExpr "i") (AlexPn 185 7 8)) (Expr (BinOpExpr DivOp (Expr (ConstExpr "n") (AlexPn 190 7 13)) (Expr (IntCExpr 2) (AlexPn 194 7 17))) (AlexPn 190 7 13))) (AlexPn 185 7 8)) (Expr (IfThenElseExpr (Expr (BinOpExpr EqOp (Expr (BinOpExpr ModOp (Expr (ConstExpr "n") (AlexPn 210 8 10)) (Expr (ConstExpr "i") (AlexPn 216 8 16))) (AlexPn 210 8 10)) (Expr (IntCExpr 0) (AlexPn 220 8 20))) (AlexPn 210 8 10)) (Expr FalseCExpr (AlexPn 227 8 27)) (Expr (FunAppExpr "loop" [Expr (BinOpExpr PlusOp (Expr (ConstExpr "i") (AlexPn 265 9 33)) (Expr (IntCExpr 2) (AlexPn 267 9 35))) (AlexPn 265 9 33)]) (AlexPn 259 9 27))) (AlexPn 207 8 7)) (Expr TrueCExpr (AlexPn 289 11 9))) (AlexPn 182 7 5)) (AlexPn 169 6 16)] (AlexPn 161 6 8)) (Expr (FunAppExpr "loop" [Expr (IntCExpr 3) (AlexPn 306 12 10)]) (AlexPn 301 12 5)) (AlexPn 161 6 8))) (AlexPn 128 5 8))) (AlexPn 96 4 8))) (AlexPn 63 3 8))) (AlexPn 25 2 8)) (AlexPn 8 1 9)] (AlexPn 0 1 1)),Left (Let [FunDef "main" [] (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Please, give the upper limit: ") (AlexPn 335 15 16)]) (AlexPn 322 15 3)) (LetIn (Let [FunDef "limit" [] (Expr (FunAppExpr "read_int" [Expr UnitCExpr (AlexPn 392 16 24)]) (AlexPn 383 16 15)) (AlexPn 375 16 7)] (AlexPn 371 16 3)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Prime numbers between 0 and ") (AlexPn 413 17 16)]) (AlexPn 400 17 3)) (Expr (FunAppExpr "print_int" [Expr (ConstExpr "limit") (AlexPn 457 18 13)]) (AlexPn 447 18 3))) (AlexPn 400 17 3)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n\\n") (AlexPn 479 19 16)]) (AlexPn 466 19 3))) (AlexPn 400 17 3)) (LetIn (Let [VarDef "counter" (AlexPn 493 20 7)] (AlexPn 489 20 3)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "counter") (AlexPn 514 21 3)) (Expr (IntCExpr 0) (AlexPn 525 21 14))) (AlexPn 514 21 3)) (Expr (IfThenExpr (Expr (BinOpExpr GEqOp (Expr (ConstExpr "limit") (AlexPn 533 22 6)) (Expr (IntCExpr 2) (AlexPn 542 22 15))) (AlexPn 533 22 6)) (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "incr" [Expr (ConstExpr "counter") (AlexPn 555 22 28)]) (AlexPn 550 22 23)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "2\\n") (AlexPn 577 22 50)]) (AlexPn 564 22 37))) (AlexPn 550 22 23))) (AlexPn 530 22 3))) (AlexPn 514 21 3)) (Expr (IfThenExpr (Expr (BinOpExpr GEqOp (Expr (ConstExpr "limit") (AlexPn 590 23 6)) (Expr (IntCExpr 3) (AlexPn 599 23 15))) (AlexPn 590 23 6)) (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "incr" [Expr (ConstExpr "counter") (AlexPn 612 23 28)]) (AlexPn 607 23 23)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "3\\n") (AlexPn 634 23 50)]) (AlexPn 621 23 37))) (AlexPn 607 23 23))) (AlexPn 587 23 3))) (AlexPn 514 21 3)) (LetIn (LetRec [FunDef "loop" [Param "number" (AlexPn 657 24 16)] (Expr (IfThenExpr (Expr (BinOpExpr LEqOp (Expr (ConstExpr "number") (AlexPn 673 25 8)) (Expr (ConstExpr "limit") (AlexPn 683 25 18))) (AlexPn 673 25 8)) (Expr (BeginExpr (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (IfThenExpr (Expr (FunAppExpr "prime" [Expr (BinOpExpr MinusOp (Expr (ConstExpr "number") (AlexPn 720 27 17)) (Expr (IntCExpr 1) (AlexPn 729 27 26))) (AlexPn 720 27 17)]) (AlexPn 713 27 10)) (Expr (BeginExpr (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "incr" [Expr (ConstExpr "counter") (AlexPn 762 29 14)]) (AlexPn 757 29 9)) (Expr (FunAppExpr "print_int" [Expr (BinOpExpr MinusOp (Expr (ConstExpr "number") (AlexPn 790 30 20)) (Expr (IntCExpr 1) (AlexPn 799 30 29))) (AlexPn 790 30 20)]) (AlexPn 779 30 9))) (AlexPn 757 29 9)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n") (AlexPn 824 31 22)]) (AlexPn 811 31 9))) (AlexPn 757 29 9))) (AlexPn 743 28 7))) (AlexPn 710 27 7)) (Expr (IfThenExpr (Expr (BinOpExpr AndOp (Expr (BinOpExpr NotEqOp (Expr (ConstExpr "number") (AlexPn 849 33 10)) (Expr (ConstExpr "limit") (AlexPn 859 33 20))) (AlexPn 849 33 10)) (Expr (FunAppExpr "prime" [Expr (BinOpExpr PlusOp (Expr (ConstExpr "number") (AlexPn 875 33 36)) (Expr (IntCExpr 1) (AlexPn 884 33 45))) (AlexPn 875 33 36)]) (AlexPn 868 33 29))) (AlexPn 849 33 10)) (Expr (BeginExpr (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "incr" [Expr (ConstExpr "counter") (AlexPn 917 35 14)]) (AlexPn 912 35 9)) (Expr (FunAppExpr "print_int" [Expr (BinOpExpr PlusOp (Expr (ConstExpr "number") (AlexPn 945 36 20)) (Expr (IntCExpr 1) (AlexPn 954 36 29))) (AlexPn 945 36 20)]) (AlexPn 934 36 9))) (AlexPn 912 35 9)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n") (AlexPn 979 37 22)]) (AlexPn 966 37 9))) (AlexPn 912 35 9))) (AlexPn 898 34 7))) (AlexPn 846 33 7))) (AlexPn 710 27 7)) (Expr (FunAppExpr "loop" [Expr (BinOpExpr PlusOp (Expr (ConstExpr "number") (AlexPn 1007 39 13)) (Expr (IntCExpr 6) (AlexPn 1016 39 22))) (AlexPn 1007 39 13)]) (AlexPn 1001 39 7))) (AlexPn 710 27 7))) (AlexPn 698 26 5))) (AlexPn 670 25 5)) (AlexPn 652 24 11)] (AlexPn 644 24 3)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "loop" [Expr (IntCExpr 6) (AlexPn 1037 41 8)]) (AlexPn 1032 41 3)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n") (AlexPn 1055 42 16)]) (AlexPn 1042 42 3))) (AlexPn 1032 41 3)) (Expr (FunAppExpr "print_int" [Expr (UnOpExpr BangOp (Expr (ConstExpr "counter") (AlexPn 1074 43 14))) (AlexPn 1073 43 13)]) (AlexPn 1063 43 3))) (AlexPn 1032 41 3)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr " prime number(s) were found.\\n") (AlexPn 1098 44 16)]) (AlexPn 1085 44 3))) (AlexPn 1032 41 3)) (AlexPn 644 24 3))) (AlexPn 514 21 3)) (AlexPn 489 20 3))) (AlexPn 400 17 3)) (AlexPn 371 16 3))) (AlexPn 322 15 3)) (AlexPn 313 14 5)] (AlexPn 309 14 1))]

reverseAST :: AST AlexPosn
reverseAST =
    [Left (Let [FunDef "main" [] (LetIn (Let [FunDef "reverse" [Param "s" (AlexPn 25 2 15),Param "r" (AlexPn 27 2 17)] (LetIn (Let [FunDef "l" [] (Expr (FunAppExpr "strlen" [Expr (ConstExpr "s") (AlexPn 50 3 20)]) (AlexPn 43 3 13)) (AlexPn 39 3 9)] (AlexPn 35 3 5)) (Expr (BinOpExpr SemicolonOp (Expr (ForExpr "i" (Expr (IntCExpr 0) (AlexPn 67 4 13)) (Expr (BinOpExpr MinusOp (Expr (ConstExpr "l") (AlexPn 72 4 18)) (Expr (IntCExpr 1) (AlexPn 74 4 20))) (AlexPn 72 4 18)) (Expr (BinOpExpr AssignMutableOp (Expr (ArrayAccess "r" [Expr (ConstExpr "i") (AlexPn 87 5 9)]) (AlexPn 85 5 7)) (Expr (UnOpExpr BangOp (Expr (ArrayAccess "s" [Expr (BinOpExpr MinusOp (Expr (BinOpExpr MinusOp (Expr (ConstExpr "l") (AlexPn 96 5 18)) (Expr (ConstExpr "i") (AlexPn 98 5 20))) (AlexPn 96 5 18)) (Expr (IntCExpr 1) (AlexPn 100 5 22))) (AlexPn 96 5 18)]) (AlexPn 94 5 16))) (AlexPn 93 5 15))) (AlexPn 85 5 7))) (AlexPn 59 4 5)) (Expr (BinOpExpr AssignMutableOp (Expr (ArrayAccess "r" [Expr (ConstExpr "l") (AlexPn 119 7 7)]) (AlexPn 117 7 5)) (Expr (CharCExpr "\\0") (AlexPn 125 7 13))) (AlexPn 117 7 5))) (AlexPn 59 4 5)) (AlexPn 35 3 5)) (AlexPn 17 2 7)] (AlexPn 13 2 3)) (LetIn (Let [ArrayDef "p" [Expr (IntCExpr 20) (AlexPn 151 9 18)] (AlexPn 140 9 7)] (AlexPn 136 9 3)) (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "reverse" [Expr (StringCExpr "\\n!dlrow olleH") (AlexPn 169 11 11),Expr (ConstExpr "p") (AlexPn 186 11 28)]) (AlexPn 161 11 3)) (Expr (FunAppExpr "print_string" [Expr (ConstExpr "p") (AlexPn 204 12 16)]) (AlexPn 191 12 3))) (AlexPn 161 11 3)) (AlexPn 136 9 3)) (AlexPn 13 2 3)) (AlexPn 4 1 5)] (AlexPn 0 1 1))]

bubbleSortAST :: AST AlexPosn
bubbleSortAST =
    [Left (Let [FunDef "bsort" [Param "x" (AlexPn 10 1 11)] (LetIn (Let [FunDef "swap" [Param "x" (AlexPn 25 2 12),Param "y" (AlexPn 27 2 14)] (LetIn (Let [FunDef "t" [] (Expr (UnOpExpr BangOp (Expr (ConstExpr "x") (AlexPn 44 3 14))) (AlexPn 43 3 13)) (AlexPn 39 3 9)] (AlexPn 35 3 5)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "x") (AlexPn 49 3 19)) (Expr (UnOpExpr BangOp (Expr (ConstExpr "y") (AlexPn 55 3 25))) (AlexPn 54 3 24))) (AlexPn 49 3 19)) (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "y") (AlexPn 58 3 28)) (Expr (ConstExpr "t") (AlexPn 63 3 33))) (AlexPn 58 3 28))) (AlexPn 49 3 19)) (AlexPn 35 3 5)) (AlexPn 20 2 7)] (AlexPn 16 2 3)) (LetIn (Let [VarDef "changed" (AlexPn 74 4 7)] (AlexPn 70 4 3)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "changed") (AlexPn 95 5 3)) (Expr TrueCExpr (AlexPn 106 5 14))) (AlexPn 95 5 3)) (Expr (WhileExpr (Expr (UnOpExpr BangOp (Expr (ConstExpr "changed") (AlexPn 121 6 10))) (AlexPn 120 6 9)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "changed") (AlexPn 136 7 5)) (Expr FalseCExpr (AlexPn 147 7 16))) (AlexPn 136 7 5)) (Expr (ForExpr "i" (Expr (IntCExpr 0) (AlexPn 166 8 13)) (Expr (BinOpExpr MinusOp (Expr (ArrayDim "x" 1) (AlexPn 171 8 18)) (Expr (IntCExpr 2) (AlexPn 179 8 26))) (AlexPn 171 8 18)) (Expr (IfThenExpr (Expr (BinOpExpr GTOp (Expr (UnOpExpr BangOp (Expr (ArrayAccess "x" [Expr (ConstExpr "i") (AlexPn 196 9 13)]) (AlexPn 194 9 11))) (AlexPn 193 9 10)) (Expr (UnOpExpr BangOp (Expr (ArrayAccess "x" [Expr (BinOpExpr PlusOp (Expr (ConstExpr "i") (AlexPn 204 9 21)) (Expr (IntCExpr 1) (AlexPn 206 9 23))) (AlexPn 204 9 21)]) (AlexPn 202 9 19))) (AlexPn 201 9 18))) (AlexPn 193 9 10)) (Expr (BeginExpr (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "swap" [Expr (ArrayAccess "x" [Expr (ConstExpr "i") (AlexPn 241 11 16)]) (AlexPn 239 11 14),Expr (ArrayAccess "x" [Expr (BinOpExpr PlusOp (Expr (ConstExpr "i") (AlexPn 246 11 21)) (Expr (IntCExpr 1) (AlexPn 248 11 23))) (AlexPn 246 11 21)]) (AlexPn 244 11 19)]) (AlexPn 234 11 9)) (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "changed") (AlexPn 260 12 9)) (Expr TrueCExpr (AlexPn 271 12 20))) (AlexPn 260 12 9))) (AlexPn 234 11 9))) (AlexPn 220 10 7))) (AlexPn 190 9 7))) (AlexPn 158 8 5))) (AlexPn 136 7 5))) (AlexPn 114 6 3))) (AlexPn 95 5 3)) (AlexPn 70 4 3)) (AlexPn 16 2 3)) (AlexPn 4 1 5)] (AlexPn 0 1 1)),Left (Let [FunDef "main" [] (LetIn (Let [FunDef "print_array" [Param "msg" (AlexPn 332 18 19),Param "x" (AlexPn 336 18 23)] (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (ConstExpr "msg") (AlexPn 357 19 18)]) (AlexPn 344 19 5)) (Expr (ForExpr "i" (Expr (IntCExpr 0) (AlexPn 374 20 13)) (Expr (BinOpExpr MinusOp (Expr (ArrayDim "x" 1) (AlexPn 379 20 18)) (Expr (IntCExpr 1) (AlexPn 387 20 26))) (AlexPn 379 20 18)) (Expr (BinOpExpr SemicolonOp (Expr (IfThenExpr (Expr (BinOpExpr GTOp (Expr (ConstExpr "i") (AlexPn 401 21 10)) (Expr (IntCExpr 0) (AlexPn 405 21 14))) (AlexPn 401 21 10)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr ", ") (AlexPn 425 21 34)]) (AlexPn 412 21 21))) (AlexPn 398 21 7)) (Expr (FunAppExpr "print_int" [Expr (UnOpExpr BangOp (Expr (ArrayAccess "x" [Expr (ConstExpr "i") (AlexPn 450 22 20)]) (AlexPn 448 22 18))) (AlexPn 447 22 17)]) (AlexPn 437 22 7))) (AlexPn 398 21 7))) (AlexPn 366 20 5))) (AlexPn 344 19 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n") (AlexPn 480 24 18)]) (AlexPn 467 24 5))) (AlexPn 344 19 5)) (AlexPn 320 18 7)] (AlexPn 316 18 3)) (LetIn (Let [VarDef "seed" (AlexPn 495 26 7),ArrayDef "x" [Expr (IntCExpr 16) (AlexPn 524 27 17)] (AlexPn 514 27 7)] (AlexPn 491 26 3)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "seed") (AlexPn 533 28 3)) (Expr (IntCExpr 65) (AlexPn 541 28 11))) (AlexPn 533 28 3)) (Expr (ForExpr "i" (Expr (IntCExpr 0) (AlexPn 555 29 11)) (Expr (IntCExpr 15) (AlexPn 560 29 16)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "seed") (AlexPn 570 30 5)) (Expr (BinOpExpr ModOp (Expr (BinOpExpr PlusOp (Expr (BinOpExpr PlusOp (Expr (BinOpExpr TimesOp (Expr (UnOpExpr BangOp (Expr (ConstExpr "seed") (AlexPn 580 30 15))) (AlexPn 579 30 14)) (Expr (IntCExpr 137) (AlexPn 587 30 22))) (AlexPn 579 30 14)) (Expr (IntCExpr 220) (AlexPn 593 30 28))) (AlexPn 579 30 14)) (Expr (ConstExpr "i") (AlexPn 599 30 34))) (AlexPn 579 30 14)) (Expr (IntCExpr 101) (AlexPn 606 30 41))) (AlexPn 579 30 14))) (AlexPn 570 30 5)) (Expr (BinOpExpr AssignMutableOp (Expr (ArrayAccess "x" [Expr (ConstExpr "i") (AlexPn 617 31 7)]) (AlexPn 615 31 5)) (Expr (UnOpExpr BangOp (Expr (ConstExpr "seed") (AlexPn 624 31 14))) (AlexPn 623 31 13))) (AlexPn 615 31 5))) (AlexPn 570 30 5))) (AlexPn 547 29 3))) (AlexPn 533 28 3)) (Expr (FunAppExpr "print_array" [Expr (StringCExpr "Initial array: ") (AlexPn 651 33 15),Expr (ConstExpr "x") (AlexPn 669 33 33)]) (AlexPn 639 33 3))) (AlexPn 533 28 3)) (Expr (FunAppExpr "bsort" [Expr (ConstExpr "x") (AlexPn 680 34 9)]) (AlexPn 674 34 3))) (AlexPn 533 28 3)) (Expr (FunAppExpr "print_array" [Expr (StringCExpr "Sorted array: ") (AlexPn 697 35 15),Expr (ConstExpr "x") (AlexPn 714 35 32)]) (AlexPn 685 35 3))) (AlexPn 533 28 3)) (AlexPn 491 26 3)) (AlexPn 316 18 3)) (AlexPn 307 17 5)] (AlexPn 303 17 1))]

meanAST :: AST AlexPosn
meanAST =
    [Left (Let [FunDef "main" [] (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Give n: ") (AlexPn 26 2 16)]) (AlexPn 13 2 3)) (LetIn (Let [FunDef "n" [] (Expr (FunAppExpr "read_int" [Expr UnitCExpr (AlexPn 57 3 20)]) (AlexPn 48 3 11)) (AlexPn 44 3 7)] (AlexPn 40 3 3)) (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Give k: ") (AlexPn 78 4 16)]) (AlexPn 65 4 3)) (LetIn (Let [FunDef "k" [] (Expr (FunAppExpr "read_int" [Expr UnitCExpr (AlexPn 109 5 20)]) (AlexPn 100 5 11)) (AlexPn 96 5 7)] (AlexPn 92 5 3)) (LetIn (Let [VarDef "sum" (AlexPn 122 7 7),VarDef "seed" (AlexPn 140 8 7)] (AlexPn 118 7 3)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "sum") (AlexPn 159 10 3)) (Expr (FloatCExpr 0.0) (AlexPn 166 10 10))) (AlexPn 159 10 3)) (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "seed") (AlexPn 173 11 3)) (Expr (IntCExpr 65) (AlexPn 181 11 11))) (AlexPn 173 11 3))) (AlexPn 159 10 3)) (Expr (ForExpr "i" (Expr (IntCExpr 1) (AlexPn 196 13 11)) (Expr (ConstExpr "k") (AlexPn 201 13 16)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "seed") (AlexPn 210 14 5)) (Expr (BinOpExpr ModOp (Expr (BinOpExpr PlusOp (Expr (BinOpExpr PlusOp (Expr (BinOpExpr TimesOp (Expr (UnOpExpr BangOp (Expr (ConstExpr "seed") (AlexPn 220 14 15))) (AlexPn 219 14 14)) (Expr (IntCExpr 137) (AlexPn 227 14 22))) (AlexPn 219 14 14)) (Expr (IntCExpr 220) (AlexPn 233 14 28))) (AlexPn 219 14 14)) (Expr (ConstExpr "i") (AlexPn 239 14 34))) (AlexPn 219 14 14)) (Expr (ConstExpr "n") (AlexPn 246 14 41))) (AlexPn 219 14 14))) (AlexPn 210 14 5)) (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "sum") (AlexPn 253 15 5)) (Expr (BinOpExpr PlusFloatOp (Expr (UnOpExpr BangOp (Expr (ConstExpr "sum") (AlexPn 261 15 13))) (AlexPn 260 15 12)) (Expr (FunAppExpr "float_of_int" [Expr (UnOpExpr BangOp (Expr (ConstExpr "seed") (AlexPn 282 15 34))) (AlexPn 281 15 33)]) (AlexPn 268 15 20))) (AlexPn 260 15 12))) (AlexPn 253 15 5))) (AlexPn 210 14 5))) (AlexPn 188 13 3))) (AlexPn 159 10 3)) (Expr (IfThenExpr (Expr (BinOpExpr GTOp (Expr (ConstExpr "k") (AlexPn 301 18 6)) (Expr (IntCExpr 0) (AlexPn 305 18 10))) (AlexPn 301 18 6)) (Expr (BeginExpr (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Mean: ") (AlexPn 337 20 18)]) (AlexPn 324 20 5)) (Expr (FunAppExpr "print_float" [Expr (BinOpExpr DivFloatOp (Expr (UnOpExpr BangOp (Expr (ConstExpr "sum") (AlexPn 365 21 19))) (AlexPn 364 21 18)) (Expr (FunAppExpr "float_of_int" [Expr (ConstExpr "k") (AlexPn 385 21 39)]) (AlexPn 372 21 26))) (AlexPn 364 21 18)]) (AlexPn 351 21 5))) (AlexPn 324 20 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n") (AlexPn 406 22 18)]) (AlexPn 393 22 5))) (AlexPn 324 20 5))) (AlexPn 314 19 3))) (AlexPn 298 18 3))) (AlexPn 159 10 3)) (AlexPn 118 7 3)) (AlexPn 92 5 3))) (AlexPn 65 4 3)) (AlexPn 40 3 3))) (AlexPn 13 2 3)) (AlexPn 4 1 5)] (AlexPn 0 1 1))]

arrayMultAST :: AST AlexPosn
arrayMultAST =
    [Left (Let [FunDef "mmult" [Param "a" (AlexPn 10 1 11),Param "b" (AlexPn 12 1 13),Param "c" (AlexPn 14 1 15)] (Expr (IfThenExpr (Expr (BinOpExpr AndOp (Expr (BinOpExpr AndOp (Expr (BinOpExpr EqOp (Expr (ArrayDim "a" 2) (AlexPn 23 2 6)) (Expr (ArrayDim "b" 1) (AlexPn 33 2 16))) (AlexPn 23 2 6)) (Expr (BinOpExpr EqOp (Expr (ArrayDim "c" 1) (AlexPn 44 2 27)) (Expr (ArrayDim "a" 1) (AlexPn 54 2 37))) (AlexPn 44 2 27))) (AlexPn 23 2 6)) (Expr (BinOpExpr EqOp (Expr (ArrayDim "c" 2) (AlexPn 65 2 48)) (Expr (ArrayDim "b" 2) (AlexPn 75 2 58))) (AlexPn 65 2 48))) (AlexPn 23 2 6)) (Expr (BeginExpr (Expr (ForExpr "i" (Expr (IntCExpr 0) (AlexPn 108 4 13)) (Expr (BinOpExpr MinusOp (Expr (ArrayDim "c" 1) (AlexPn 113 4 18)) (Expr (IntCExpr 1) (AlexPn 123 4 28))) (AlexPn 113 4 18)) (Expr (ForExpr "j" (Expr (IntCExpr 0) (AlexPn 142 5 15)) (Expr (BinOpExpr MinusOp (Expr (ArrayDim "c" 2) (AlexPn 147 5 20)) (Expr (IntCExpr 1) (AlexPn 157 5 30))) (AlexPn 147 5 20)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ArrayAccess "c" [Expr (ConstExpr "i") (AlexPn 172 6 11),Expr (ConstExpr "j") (AlexPn 175 6 14)]) (AlexPn 170 6 9)) (Expr (IntCExpr 0) (AlexPn 181 6 20))) (AlexPn 170 6 9)) (Expr (ForExpr "k" (Expr (IntCExpr 0) (AlexPn 200 7 17)) (Expr (BinOpExpr MinusOp (Expr (ArrayDim "a" 2) (AlexPn 205 7 22)) (Expr (IntCExpr 1) (AlexPn 215 7 32))) (AlexPn 205 7 22)) (Expr (BinOpExpr AssignMutableOp (Expr (ArrayAccess "c" [Expr (ConstExpr "i") (AlexPn 232 8 13),Expr (ConstExpr "j") (AlexPn 235 8 16)]) (AlexPn 230 8 11)) (Expr (BinOpExpr PlusOp (Expr (UnOpExpr BangOp (Expr (ArrayAccess "c" [Expr (ConstExpr "i") (AlexPn 244 8 25),Expr (ConstExpr "j") (AlexPn 247 8 28)]) (AlexPn 242 8 23))) (AlexPn 241 8 22)) (Expr (BinOpExpr TimesOp (Expr (UnOpExpr BangOp (Expr (ArrayAccess "a" [Expr (ConstExpr "i") (AlexPn 255 8 36),Expr (ConstExpr "k") (AlexPn 258 8 39)]) (AlexPn 253 8 34))) (AlexPn 252 8 33)) (Expr (UnOpExpr BangOp (Expr (ArrayAccess "b" [Expr (ConstExpr "k") (AlexPn 266 8 47),Expr (ConstExpr "j") (AlexPn 269 8 50)]) (AlexPn 264 8 45))) (AlexPn 263 8 44))) (AlexPn 252 8 33))) (AlexPn 241 8 22))) (AlexPn 230 8 11))) (AlexPn 192 7 9))) (AlexPn 170 6 9))) (AlexPn 134 5 7))) (AlexPn 100 4 5))) (AlexPn 90 3 3))) (AlexPn 20 2 3)) (AlexPn 4 1 5)] (AlexPn 0 1 1)),Left (Let [VarDef "seed" (AlexPn 316 14 5)] (AlexPn 312 14 1)),Left (Let [FunDef "init" [] (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "seed") (AlexPn 341 16 12)) (Expr (IntCExpr 65) (AlexPn 349 16 20))) (AlexPn 341 16 12)) (AlexPn 334 16 5)] (AlexPn 330 16 1)),Left (Let [FunDef "minit" [Param "m" (AlexPn 363 18 11)] (Expr (ForExpr "i" (Expr (IntCExpr 0) (AlexPn 377 19 11)) (Expr (BinOpExpr MinusOp (Expr (ArrayDim "m" 1) (AlexPn 382 19 16)) (Expr (IntCExpr 1) (AlexPn 392 19 26))) (AlexPn 382 19 16)) (Expr (ForExpr "j" (Expr (IntCExpr 0) (AlexPn 409 20 13)) (Expr (BinOpExpr MinusOp (Expr (ArrayDim "m" 2) (AlexPn 414 20 18)) (Expr (IntCExpr 1) (AlexPn 424 20 28))) (AlexPn 414 20 18)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "seed") (AlexPn 435 21 7)) (Expr (BinOpExpr ModOp (Expr (BinOpExpr PlusOp (Expr (BinOpExpr PlusOp (Expr (BinOpExpr TimesOp (Expr (UnOpExpr BangOp (Expr (ConstExpr "seed") (AlexPn 445 21 17))) (AlexPn 444 21 16)) (Expr (IntCExpr 137) (AlexPn 452 21 24))) (AlexPn 444 21 16)) (Expr (BinOpExpr TimesOp (Expr (IntCExpr 2) (AlexPn 458 21 30)) (Expr (ConstExpr "i") (AlexPn 460 21 32))) (AlexPn 458 21 30))) (AlexPn 444 21 16)) (Expr (ConstExpr "j") (AlexPn 464 21 36))) (AlexPn 444 21 16)) (Expr (IntCExpr 101) (AlexPn 471 21 43))) (AlexPn 444 21 16))) (AlexPn 435 21 7)) (Expr (BinOpExpr AssignMutableOp (Expr (ArrayAccess "m" [Expr (ConstExpr "i") (AlexPn 484 22 9),Expr (ConstExpr "j") (AlexPn 487 22 12)]) (AlexPn 482 22 7)) (Expr (UnOpExpr BangOp (Expr (ConstExpr "seed") (AlexPn 494 22 19))) (AlexPn 493 22 18))) (AlexPn 482 22 7))) (AlexPn 435 21 7))) (AlexPn 401 20 5))) (AlexPn 369 19 3)) (AlexPn 357 18 5)] (AlexPn 353 18 1)),Left (Let [FunDef "mprint" [Param "m" (AlexPn 527 26 12)] (Expr (ForExpr "i" (Expr (IntCExpr 0) (AlexPn 541 27 11)) (Expr (BinOpExpr MinusOp (Expr (ArrayDim "m" 1) (AlexPn 546 27 16)) (Expr (IntCExpr 1) (AlexPn 556 27 26))) (AlexPn 546 27 16)) (Expr (BinOpExpr SemicolonOp (Expr (ForExpr "j" (Expr (IntCExpr 0) (AlexPn 573 28 13)) (Expr (BinOpExpr MinusOp (Expr (ArrayDim "m" 2) (AlexPn 578 28 18)) (Expr (IntCExpr 1) (AlexPn 588 28 28))) (AlexPn 578 28 18)) (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_int" [Expr (UnOpExpr BangOp (Expr (ArrayAccess "m" [Expr (ConstExpr "i") (AlexPn 612 29 20),Expr (ConstExpr "j") (AlexPn 615 29 23)]) (AlexPn 610 29 18))) (AlexPn 609 29 17)]) (AlexPn 599 29 7)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr " ") (AlexPn 638 30 20)]) (AlexPn 625 30 7))) (AlexPn 599 29 7))) (AlexPn 565 28 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n") (AlexPn 669 32 18)]) (AlexPn 656 32 5))) (AlexPn 565 28 5))) (AlexPn 533 27 3)) (AlexPn 520 26 5)] (AlexPn 516 26 1)),Left (Let [FunDef "main" [] (LetIn (Let [ArrayDef "x" [Expr (IntCExpr 3) (AlexPn 709 36 17),Expr (IntCExpr 4) (AlexPn 711 36 19)] (AlexPn 699 36 7),ArrayDef "y" [Expr (IntCExpr 4) (AlexPn 730 37 17),Expr (IntCExpr 5) (AlexPn 732 37 19)] (AlexPn 720 37 7),ArrayDef "z" [Expr (IntCExpr 3) (AlexPn 751 38 17),Expr (IntCExpr 5) (AlexPn 753 38 19)] (AlexPn 741 38 7)] (AlexPn 695 36 3)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "minit" [Expr (ConstExpr "x") (AlexPn 768 40 9)]) (AlexPn 762 40 3)) (Expr (FunAppExpr "minit" [Expr (ConstExpr "y") (AlexPn 779 41 9)]) (AlexPn 773 41 3))) (AlexPn 762 40 3)) (Expr (FunAppExpr "mprint" [Expr (ConstExpr "x") (AlexPn 792 43 10)]) (AlexPn 785 43 3))) (AlexPn 762 40 3)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\ntimes\\n\\n") (AlexPn 810 44 16)]) (AlexPn 797 44 3))) (AlexPn 762 40 3)) (Expr (FunAppExpr "mprint" [Expr (ConstExpr "y") (AlexPn 834 45 10)]) (AlexPn 827 45 3))) (AlexPn 762 40 3)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\nmakes\\n\\n") (AlexPn 852 46 16)]) (AlexPn 839 46 3))) (AlexPn 762 40 3)) (Expr (FunAppExpr "mmult" [Expr (ConstExpr "x") (AlexPn 875 47 9),Expr (ConstExpr "y") (AlexPn 877 47 11),Expr (ConstExpr "z") (AlexPn 879 47 13)]) (AlexPn 869 47 3))) (AlexPn 762 40 3)) (Expr (FunAppExpr "mprint" [Expr (ConstExpr "z") (AlexPn 891 48 10)]) (AlexPn 884 48 3))) (AlexPn 762 40 3)) (AlexPn 695 36 3)) (AlexPn 686 35 5)] (AlexPn 682 35 1))]

binTreesAST :: AST AlexPosn
binTreesAST =
    [Right (TypeDef [TDef "tree" [Constr "Nil" [] (AlexPn 12 1 13),Constr "Node" [Type IntType (AlexPn 26 1 27),Type (UserDefinedType "tree") (AlexPn 30 1 31),Type (UserDefinedType "tree") (AlexPn 35 1 36)] (AlexPn 18 1 19)] (AlexPn 5 1 6)] (AlexPn 0 1 1)),Left (LetRec [FunDef "treeInsert" [Param "t" (AlexPn 60 3 20),Param "n" (AlexPn 62 3 22)] (MatchExpr (Expr (ConstExpr "t") (AlexPn 74 4 9)) [Match (Pattern (ConstrPattern "Nil" []) (AlexPn 87 5 7)) (Expr (ConstrAppExpr "Node" [Expr (ConstExpr "n") (AlexPn 108 5 28),Expr (ConstConstrExpr "Nil") (AlexPn 110 5 30),Expr (ConstConstrExpr "Nil") (AlexPn 114 5 34)]) (AlexPn 103 5 23)) (AlexPn 87 5 7),Match (Pattern (ConstrPattern "Node" [Pattern (IdPattern "m") (AlexPn 129 6 12),Pattern (IdPattern "t1") (AlexPn 131 6 14),Pattern (IdPattern "t2") (AlexPn 134 6 17)]) (AlexPn 124 6 7)) (Expr (IfThenElseExpr (Expr (BinOpExpr LTOp (Expr (ConstExpr "n") (AlexPn 148 6 31)) (Expr (ConstExpr "m") (AlexPn 152 6 35))) (AlexPn 148 6 31)) (Expr (ConstrAppExpr "Node" [Expr (ConstExpr "m") (AlexPn 164 6 47),Expr (FunAppExpr "treeInsert" [Expr (ConstExpr "t1") (AlexPn 178 6 61),Expr (ConstExpr "n") (AlexPn 181 6 64)]) (AlexPn 167 6 50),Expr (ConstExpr "t2") (AlexPn 184 6 67)]) (AlexPn 159 6 42)) (Expr (IfThenElseExpr (Expr (BinOpExpr GTOp (Expr (ConstExpr "n") (AlexPn 217 7 31)) (Expr (ConstExpr "m") (AlexPn 221 7 35))) (AlexPn 217 7 31)) (Expr (ConstrAppExpr "Node" [Expr (ConstExpr "m") (AlexPn 233 7 47),Expr (ConstExpr "t1") (AlexPn 235 7 49),Expr (FunAppExpr "treeInsert" [Expr (ConstExpr "t2") (AlexPn 250 7 64),Expr (ConstExpr "n") (AlexPn 253 7 67)]) (AlexPn 239 7 53)]) (AlexPn 228 7 42)) (Expr (ConstExpr "t") (AlexPn 283 8 28))) (AlexPn 214 7 28))) (AlexPn 145 6 28)) (AlexPn 124 6 7)] (AlexPn 68 4 3)) (AlexPn 49 3 9)] (AlexPn 41 3 1)),Left (LetRec [FunDef "treeMerge" [Param "t1" (AlexPn 310 11 19),Param "t2" (AlexPn 313 11 22)] (MatchExpr (Expr (ConstExpr "t1") (AlexPn 326 12 9)) [Match (Pattern (ConstrPattern "Nil" []) (AlexPn 340 13 7)) (Expr (ConstExpr "t2") (AlexPn 348 13 15)) (AlexPn 340 13 7),Match (Pattern (ConstrPattern "Node" [Pattern (IdPattern "n") (AlexPn 362 14 12),Pattern (IdPattern "t11") (AlexPn 364 14 14),Pattern (IdPattern "t12") (AlexPn 368 14 18)]) (AlexPn 357 14 7)) (Expr (ConstrAppExpr "Node" [Expr (ConstExpr "n") (AlexPn 380 14 30),Expr (ConstExpr "t11") (AlexPn 382 14 32),Expr (FunAppExpr "treeMerge" [Expr (ConstExpr "t12") (AlexPn 397 14 47),Expr (ConstExpr "t2") (AlexPn 401 14 51)]) (AlexPn 387 14 37)]) (AlexPn 375 14 25)) (AlexPn 357 14 7)] (AlexPn 320 12 3)) (AlexPn 300 11 9)] (AlexPn 292 11 1)),Left (LetRec [FunDef "treeDelete" [Param "t" (AlexPn 431 17 20),Param "n" (AlexPn 433 17 22)] (MatchExpr (Expr (ConstExpr "t") (AlexPn 445 18 9)) [Match (Pattern (ConstrPattern "Nil" []) (AlexPn 458 19 7)) (Expr (ConstExpr "t") (AlexPn 468 19 17)) (AlexPn 458 19 7),Match (Pattern (ConstrPattern "Node" [Pattern (IdPattern "m") (AlexPn 481 20 12),Pattern (IdPattern "t1") (AlexPn 483 20 14),Pattern (IdPattern "t2") (AlexPn 486 20 17)]) (AlexPn 476 20 7)) (Expr (IfThenElseExpr (Expr (BinOpExpr LTOp (Expr (ConstExpr "n") (AlexPn 495 20 26)) (Expr (ConstExpr "m") (AlexPn 499 20 30))) (AlexPn 495 20 26)) (Expr (ConstrAppExpr "Node" [Expr (ConstExpr "m") (AlexPn 535 21 30),Expr (FunAppExpr "treeDelete" [Expr (ConstExpr "t1") (AlexPn 549 21 44),Expr (ConstExpr "n") (AlexPn 552 21 47)]) (AlexPn 538 21 33),Expr (ConstExpr "t2") (AlexPn 555 21 50)]) (AlexPn 530 21 25)) (Expr (IfThenElseExpr (Expr (BinOpExpr GTOp (Expr (ConstExpr "n") (AlexPn 588 22 31)) (Expr (ConstExpr "m") (AlexPn 592 22 35))) (AlexPn 588 22 31)) (Expr (ConstrAppExpr "Node" [Expr (ConstExpr "m") (AlexPn 628 23 30),Expr (ConstExpr "t1") (AlexPn 630 23 32),Expr (FunAppExpr "treeDelete" [Expr (ConstExpr "t2") (AlexPn 645 23 47),Expr (ConstExpr "n") (AlexPn 648 23 50)]) (AlexPn 634 23 36)]) (AlexPn 623 23 25)) (Expr (FunAppExpr "treeMerge" [Expr (ConstExpr "t1") (AlexPn 712 25 35),Expr (ConstExpr "t2") (AlexPn 715 25 38)]) (AlexPn 702 25 25))) (AlexPn 585 22 28))) (AlexPn 492 20 23)) (AlexPn 476 20 7)] (AlexPn 439 18 3)) (AlexPn 420 17 9)] (AlexPn 412 17 1)),Left (LetRec [FunDef "treePrint" [Param "t" (AlexPn 743 28 19)] (MatchExpr (Expr (ConstExpr "t") (AlexPn 755 29 9)) [Match (Pattern (ConstrPattern "Nil" []) (AlexPn 768 30 7)) (Expr UnitCExpr (AlexPn 776 30 15)) (AlexPn 768 30 7),Match (Pattern (ConstrPattern "Node" [Pattern (IdPattern "n") (AlexPn 790 31 12),Pattern (IdPattern "t1") (AlexPn 792 31 14),Pattern (IdPattern "t2") (AlexPn 795 31 17)]) (AlexPn 785 31 7)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_int" [Expr (ConstExpr "n") (AlexPn 811 31 33)]) (AlexPn 801 31 23)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "(") (AlexPn 849 32 36)]) (AlexPn 836 32 23))) (AlexPn 801 31 23)) (Expr (FunAppExpr "treePrint" [Expr (ConstExpr "t1") (AlexPn 886 33 33)]) (AlexPn 876 33 23))) (AlexPn 801 31 23)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "|") (AlexPn 925 34 36)]) (AlexPn 912 34 23))) (AlexPn 801 31 23)) (Expr (FunAppExpr "treePrint" [Expr (ConstExpr "t2") (AlexPn 962 35 33)]) (AlexPn 952 35 23))) (AlexPn 801 31 23)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr ")") (AlexPn 1001 36 36)]) (AlexPn 988 36 23))) (AlexPn 801 31 23)) (AlexPn 785 31 7)] (AlexPn 749 29 3)) (AlexPn 733 28 9)] (AlexPn 725 28 1)),Left (LetRec [FunDef "treeCount" [Param "t" (AlexPn 1030 39 19)] (MatchExpr (Expr (ConstExpr "t") (AlexPn 1042 40 9)) [Match (Pattern (ConstrPattern "Nil" []) (AlexPn 1055 41 7)) (Expr (IntCExpr 0) (AlexPn 1065 41 17)) (AlexPn 1055 41 7),Match (Pattern (ConstrPattern "Node" [Pattern (IdPattern "n") (AlexPn 1078 42 12),Pattern (IdPattern "t1") (AlexPn 1080 42 14),Pattern (IdPattern "t2") (AlexPn 1083 42 17)]) (AlexPn 1073 42 7)) (Expr (BinOpExpr PlusOp (Expr (BinOpExpr PlusOp (Expr (IntCExpr 1) (AlexPn 1089 42 23)) (Expr (FunAppExpr "treeCount" [Expr (ConstExpr "t1") (AlexPn 1103 42 37)]) (AlexPn 1093 42 27))) (AlexPn 1089 42 23)) (Expr (FunAppExpr "treeCount" [Expr (ConstExpr "t2") (AlexPn 1118 42 52)]) (AlexPn 1108 42 42))) (AlexPn 1089 42 23)) (AlexPn 1073 42 7)] (AlexPn 1036 40 3)) (AlexPn 1020 39 9)] (AlexPn 1012 39 1)),Left (Let [FunDef "main" [] (LetIn (Let [VarDef "seed" (AlexPn 1146 47 7)] (AlexPn 1142 47 3)) (LetIn (Let [FunDef "next" [Param "u" (AlexPn 1173 48 12)] (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "seed") (AlexPn 1181 49 5)) (Expr (BinOpExpr ModOp (Expr (BinOpExpr PlusOp (Expr (BinOpExpr TimesOp (Expr (UnOpExpr BangOp (Expr (ConstExpr "seed") (AlexPn 1191 49 15))) (AlexPn 1190 49 14)) (Expr (IntCExpr 4241) (AlexPn 1198 49 22))) (AlexPn 1190 49 14)) (Expr (IntCExpr 22) (AlexPn 1205 49 29))) (AlexPn 1190 49 14)) (Expr (IntCExpr 9949) (AlexPn 1213 49 37))) (AlexPn 1190 49 14))) (AlexPn 1181 49 5)) (Expr (UnOpExpr BangOp (Expr (ConstExpr "seed") (AlexPn 1224 50 6))) (AlexPn 1223 50 5))) (AlexPn 1181 49 5)) (AlexPn 1168 48 7)] (AlexPn 1164 48 3)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "seed") (AlexPn 1234 51 3)) (Expr (IntCExpr 65) (AlexPn 1242 51 11))) (AlexPn 1234 51 3)) (LetIn (Let [FunDef "random" [Param "max" (AlexPn 1260 53 14)] (Expr (BinOpExpr ModOp (Expr (FunAppExpr "next" [Expr UnitCExpr (AlexPn 1271 53 25)]) (AlexPn 1266 53 20)) (Expr (ConstExpr "max") (AlexPn 1278 53 32))) (AlexPn 1266 53 20)) (AlexPn 1253 53 7)] (AlexPn 1249 53 3)) (LetIn (Let [VarDef "t" (AlexPn 1292 55 7)] (AlexPn 1288 55 3)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "t") (AlexPn 1307 56 3)) (Expr (ConstConstrExpr "Nil") (AlexPn 1312 56 8))) (AlexPn 1307 56 3)) (Expr (ForExpr "i" (Expr (IntCExpr 1) (AlexPn 1328 58 11)) (Expr (IntCExpr 10) (AlexPn 1333 58 16)) (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "t") (AlexPn 1343 59 5)) (Expr (FunAppExpr "treeInsert" [Expr (UnOpExpr BangOp (Expr (ConstExpr "t") (AlexPn 1360 59 22))) (AlexPn 1359 59 21),Expr (FunAppExpr "random" [Expr (IntCExpr 100) (AlexPn 1370 59 32)]) (AlexPn 1363 59 25)]) (AlexPn 1348 59 10))) (AlexPn 1343 59 5))) (AlexPn 1320 58 3))) (AlexPn 1307 56 3)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Initial tree: ") (AlexPn 1399 62 16)]) (AlexPn 1386 62 3))) (AlexPn 1307 56 3)) (Expr (FunAppExpr "treePrint" [Expr (UnOpExpr BangOp (Expr (ConstExpr "t") (AlexPn 1430 63 14))) (AlexPn 1429 63 13)]) (AlexPn 1419 63 3))) (AlexPn 1307 56 3)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n") (AlexPn 1448 64 16)]) (AlexPn 1435 64 3))) (AlexPn 1307 56 3)) (LetIn (LetRec [FunDef "choose" [Param "t" (AlexPn 1472 66 18)] (MatchExpr (Expr (ConstExpr "t") (AlexPn 1486 67 11)) [Match (Pattern (ConstrPattern "Node" [Pattern (IdPattern "n") (AlexPn 1504 68 12),Pattern (IdPattern "t1") (AlexPn 1506 68 14),Pattern (IdPattern "t2") (AlexPn 1509 68 17)]) (AlexPn 1499 68 7)) (LetIn (Let [FunDef "c1" [] (Expr (FunAppExpr "treeCount" [Expr (ConstExpr "t1") (AlexPn 1542 69 28)]) (AlexPn 1532 69 18)) (AlexPn 1527 69 13),FunDef "c2" [] (Expr (FunAppExpr "treeCount" [Expr (ConstExpr "t2") (AlexPn 1572 70 28)]) (AlexPn 1562 70 18)) (AlexPn 1557 70 13)] (AlexPn 1523 69 9)) (LetIn (Let [FunDef "r" [] (Expr (FunAppExpr "random" [Expr (BinOpExpr PlusOp (Expr (BinOpExpr PlusOp (Expr (IntCExpr 1) (AlexPn 1602 71 25)) (Expr (ConstExpr "c1") (AlexPn 1606 71 29))) (AlexPn 1602 71 25)) (Expr (ConstExpr "c2") (AlexPn 1611 71 34))) (AlexPn 1602 71 25)]) (AlexPn 1594 71 17)) (AlexPn 1590 71 13)] (AlexPn 1586 71 9)) (Expr (IfThenElseExpr (Expr (BinOpExpr EqOp (Expr (ConstExpr "r") (AlexPn 1629 72 12)) (Expr (IntCExpr 0) (AlexPn 1633 72 16))) (AlexPn 1629 72 12)) (Expr (ConstExpr "n") (AlexPn 1650 73 11)) (Expr (IfThenElseExpr (Expr (BinOpExpr LEqOp (Expr (ConstExpr "r") (AlexPn 1668 74 17)) (Expr (ConstExpr "c1") (AlexPn 1673 74 22))) (AlexPn 1668 74 17)) (Expr (FunAppExpr "choose" [Expr (ConstExpr "t1") (AlexPn 1698 75 18)]) (AlexPn 1691 75 11)) (Expr (FunAppExpr "choose" [Expr (ConstExpr "t2") (AlexPn 1731 77 18)]) (AlexPn 1724 77 11))) (AlexPn 1665 74 14))) (AlexPn 1626 72 9)) (AlexPn 1586 71 9)) (AlexPn 1523 69 9)) (AlexPn 1499 68 7)] (AlexPn 1480 67 5)) (AlexPn 1465 66 11)] (AlexPn 1457 66 3)) (Expr (ForExpr "i" (Expr (IntCExpr 1) (AlexPn 1756 80 11)) (Expr (FunAppExpr "treeCount" [Expr (UnOpExpr BangOp (Expr (ConstExpr "t") (AlexPn 1772 80 27))) (AlexPn 1771 80 26)]) (AlexPn 1761 80 16)) (LetIn (Let [FunDef "n" [] (Expr (FunAppExpr "choose" [Expr (UnOpExpr BangOp (Expr (ConstExpr "t") (AlexPn 1797 81 21))) (AlexPn 1796 81 20)]) (AlexPn 1789 81 13)) (AlexPn 1785 81 9)] (AlexPn 1781 81 5)) (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (BinOpExpr SemicolonOp (Expr (FunAppExpr "print_string" [Expr (StringCExpr "Deleting ") (AlexPn 1819 82 18)]) (AlexPn 1806 82 5)) (Expr (FunAppExpr "print_int" [Expr (ConstExpr "n") (AlexPn 1846 83 15)]) (AlexPn 1836 83 5))) (AlexPn 1806 82 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr ": ") (AlexPn 1866 84 18)]) (AlexPn 1853 84 5))) (AlexPn 1806 82 5)) (Expr (BinOpExpr AssignMutableOp (Expr (ConstExpr "t") (AlexPn 1876 85 5)) (Expr (FunAppExpr "treeDelete" [Expr (UnOpExpr BangOp (Expr (ConstExpr "t") (AlexPn 1893 85 22))) (AlexPn 1892 85 21),Expr (ConstExpr "n") (AlexPn 1895 85 24)]) (AlexPn 1881 85 10))) (AlexPn 1876 85 5))) (AlexPn 1806 82 5)) (Expr (FunAppExpr "treePrint" [Expr (UnOpExpr BangOp (Expr (ConstExpr "t") (AlexPn 1913 86 16))) (AlexPn 1912 86 15)]) (AlexPn 1902 86 5))) (AlexPn 1806 82 5)) (Expr (FunAppExpr "print_string" [Expr (StringCExpr "\\n") (AlexPn 1933 87 18)]) (AlexPn 1920 87 5))) (AlexPn 1806 82 5)) (AlexPn 1781 81 5))) (AlexPn 1748 80 3)) (AlexPn 1457 66 3))) (AlexPn 1307 56 3)) (AlexPn 1288 55 3)) (AlexPn 1249 53 3))) (AlexPn 1234 51 3)) (AlexPn 1164 48 3)) (AlexPn 1142 47 3)) (AlexPn 1133 46 5)] (AlexPn 1129 46 1))]